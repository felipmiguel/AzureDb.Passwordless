name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  id-token: write
jobs:
  build:

    runs-on: ubuntu-latest

    env:
        PACKAGE_VERSION: 1.0.0-beta.1

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore Batec.Azure.Data.Extensions.sln
    - name: Build
      run: dotnet build --no-restore Batec.Azure.Data.Extensions.sln
      
    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Test Common
      working-directory: ./Batec.Azure.Data.Extensions.Common/tests/
      run: dotnet test        

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: 'Terraform Init MySql'
      working-directory: "./iac/mysql"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform init
      
    # Terraform Apply
    - name: 'Terraform Apply MySql'
      id: terraform-apply-mysql
      working-directory: "./iac/mysql"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform apply -auto-approve
      
    - name: Get Terraform output
      working-directory: "./iac/mysql"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        MYSQL_FQDN=$(terraform output -raw fqdn)
        MYSQL_DATABASE=$(terraform output -raw database)
        MYSQL_SERVER_ADMIN=$(terraform output -raw aad_admin)
        KV_NAME=$(terraform output -raw kv_name)
        echo "MYSQL_FQDN=${MYSQL_FQDN}" >> $GITHUB_ENV
        echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> $GITHUB_ENV
        echo "MYSQL_SERVER_ADMIN=${MYSQL_SERVER_ADMIN}" >> $GITHUB_ENV
        echo "KV_NAME=${KV_NAME}" >> $GITHUB_ENV
      continue-on-error: true

    - name: Save token
      run: |
        at=$(az account get-access-token --resource=https://ossrdbms-aad.database.windows.net/.default --query accessToken -o tsv)
        az keyvault secret set --name accesstoken --vault-name ${{ env.KV_NAME }} --value "$at"      
    
    - name: Test MySqlConnector
      working-directory: ./Batec.Azure.Data.Extensions.MySqlConnector/tests/
      run: dotnet test
      continue-on-error: true
      env:
        MYSQL_FQDN: ${{ env.MYSQL_FQDN }}
        MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        MYSQL_SERVER_ADMIN: ${{ env.MYSQL_SERVER_ADMIN }}
    
    - name: Setup EF tools
      run: dotnet tool install --global dotnet-ef
      continue-on-error: true
      
    - name: Setup MySQL EF connection string
      run: |
        MYSQL_CONNECTION_STRING="Server=${{ env.MYSQL_FQDN }};Port=3306;User ID=${{ env.MYSQL_SERVER_ADMIN }};Database=${{ env.MYSQL_DATABASE }};SSL Mode=Required;Allow Public Key Retrieval=True;Connection Timeout=30"
        echo "{\"ConnectionStrings\":{\"DefaultConnection\":\"${MYSQL_CONNECTION_STRING}\"}}" >appsettings.json
      continue-on-error: true
      
    - name: Setup MySQL EF database
      run: dotnet ef database update
      continue-on-error: true
      
        
    - name: Test MySqlConnector Entity Framework
      working-directory: ./Batec.Azure.Data.Extensions.Pomelo.EntityFrameworkCore/tests/
      run: dotnet test
      continue-on-error: true
      env:
        MYSQL_FQDN: ${{ env.MYSQL_FQDN }}
        MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        MYSQL_SERVER_ADMIN: ${{ env.MYSQL_SERVER_ADMIN }}
      
    

    # Terraform Destroy
    - name: Terraform Destroy
      if: steps.terraform-apply-mysql.outcome == 'success'
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform destroy -auto-approve
